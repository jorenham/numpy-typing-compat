from typing import TYPE_CHECKING, Final, Literal

if TYPE_CHECKING:
{%- if np_start >= (2, 1) %}
    import numpy as array_api
    from numpy import long, ulong
    from numpy.dtypes import StringDType
{%- elif np_start >= (2, 0) -%}{# >=2.0, <2.1 #}
    from typing_extensions import Never, TypeAlias

    import numpy as array_api
    from numpy import dtype, long, ulong

    StringDType: TypeAlias = dtype[Never]
{%- else -%}{# >=1.22, <2.0 #}
    from typing_extensions import Never, TypeAlias

    from numpy import int_ as long
    from numpy import uint as ulong
{%- if np_start >= (1, 23) %}{# >=1.23, <2.0 #}
    from numpy import array_api

    StringDType: TypeAlias = Never
{%- else -%}{# >=1.22, <1.23 #}
    array_api: TypeAlias = Never
    StringDType: TypeAlias = Never
{%- endif %}{# >=1.22, <2.0 #}
{%- endif %}


{% for other in PROJECTS -%}
{% set np_other = other.np_range[0] -%}
{% set is_ge = np_start >= np_other -%}
{{ other.const_name }}: Final[Literal[{{ is_ge }}]] = {{ is_ge }}
{% endfor %}
__version__: Final[Literal["{{ project.version }}"]] = "{{ project.version }}"

__all__ = (
    "__version__",
{%- for other in PROJECTS %}
    "{{ other.const_name }}",
{%- endfor %}
    "StringDType",
    "array_api",
    "long",
    "ulong",
    "_check_version",
)


def __dir__() -> tuple[str, ...]:
    return __all__ + ("_check_version",)


def __getattr__(name: str, /) -> object:
{%- if np_start >= (1, 23) %}
    if name == "array_api":
        import numpy{% if np_start < (2, 0) %}.array_api{% endif %} as array_api
        return array_api
{%- endif %}
{% if np_start >= (2, 0) %}
    if name == "StringDType":
        from numpy.dtypes import StringDType
        return StringDType

{%- endif %}
    if name == "long":
        from numpy import {% if np_start < (2, 0) %}int_ as {% endif %}long
        return long

    if name == "ulong":
        from numpy import {% if np_start < (2, 0) %}uint as {% endif %}ulong
        return ulong

    if name in globals():
        return globals()[name]

    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")


def _check_version() -> bool:
    """"Check if the `numpy-typing-compat` version is compatible with `numpy`."""
    import numpy as np

    np_version = tuple(map(int, np.__version__.split(".", 2)[:2]))
    return ({{ np_start[0] }}, {{ np_start[1] }}) <= np_version < ({{ np_stop[0] }}, {{ np_stop[1] }})

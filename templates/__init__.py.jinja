from typing import TYPE_CHECKING, Final, Literal

{% if np_start >= (2, 0) -%}
from numpy import long, ulong
{%- else -%}
from numpy import int_ as long, uint as ulong
{%- endif %}

if TYPE_CHECKING:
    from typing_extensions import TypeAlias, Never
{% if np_start >= (2, 0) %}
    import numpy as array_api
    from numpy import dtype

    # there were no `numpy.dtypes.StringDType` typing stubs before numpy 2.1, but
    # because it has no scalar type we use `Never` to indicate its absence.
    StringDType: TypeAlias = dtype[Never]
{% else -%}
{% if np_start >= (1, 23) %}
    from numpy import array_api
{%- else %}
    array_api: TypeAlias = Never
{%- endif %}

    # `StringDType` did not exist before numpy 2.0, and we use `Never` to indicate that
    # it is not available in earlier versions, so that when used in type hints it won't
    # cause issues with type checkers, rejecting all assignments (except for `Any`).
    StringDType: TypeAlias = Never
{%- endif %}

__all__ = (
{%- for project in PROJECTS %}
    "{{ project.const_name }}",
{%- endfor %}
{%- if np_start >= (2, 0) %}
    "StringDType",
{%- endif %}
{%- if np_start >= (1, 23) %}
    "array_api",
{%- endif %}
    "long",
    "ulong",
)


def __dir__() -> tuple[str, ...]:
    return __all__


def __getattr__(name: str, /) -> object:
{%- if np_start >= (1, 23) %}
    if name == "array_api":
{%- if np_start >= (2, 0) %}
        import numpy
        return numpy
{%- else %}
        from numpy import array_api
        return array_api
{%- endif %}
{%- endif %}
{% if np_start >= (2, 0) %}
    if name == "StringDType":
        from numpy.dtypes import StringDType
        return StringDType
{%- endif %}

    if name in globals():
        return globals()[name]

    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")


{% for project in PROJECTS -%}
{% set np_other = project.np_range[0] -%}
{% set is_ge = np_start >= np_other -%}
{{ project.const_name }}: Final[Literal[{{ is_ge }}]] = {{ is_ge }}  # numpy >= {{ np_other }}
{% endfor -%}

from typing import Final, Literal

{% if np_start >= (2, 0) -%}
{%- if np_start >= (1, 23) %}import numpy as array_api{% endif %}
from numpy import long, ulong
{%- else -%}
from numpy import array_api, int_ as long, uint as ulong
{%- endif %}

{% if np_start >= (2, 1) -%}
from numpy.dtypes import StringDType
{%- else -%}
from typing import TYPE_CHECKING, TypeAlias

{% if np_start >= (2, 0) -%}
if TYPE_CHECKING:
    from typing_extensions import Never
    from numpy import dtype

    # there were no `numpy.dtypes.StringDType` typing stubs before numpy 2.1, but
    # because it has no scalar type we use `Never` to indicate its absence.
    StringDType: TypeAlias = dtype[Never]
else:
    from numpy.dtypes import StringDType
{% else -%}
if TYPE_CHECKING:
    from typing_extensions import Never

    # `StringDType` did not exist before numpy 2.0, and we use `Never` to indicate that
    # it is not available in earlier versions, so that when used in type hints it won't
    # cause issues with type checkers, rejecting all assignments (except for `Any`).
    StringDType: TypeAlias = Never
{%- endif %}
{%- endif %}

__all__ = (
    {%- for project in PROJECTS %}
    "{{ project.const_name }}",
    {%- endfor %}
    {%- if np_start >= (2, 0) %}
    "StringDType",
    {%- endif %}
    "array_api",
    "long",
    "ulong",
)


def __dir__() -> tuple[str, ...]:
    return __all__


{% for project in PROJECTS -%}
{% set np_other = project.np_range[0] -%}
{% set is_ge = np_start >= np_other -%}
{{ project.const_name }}: Final[Literal[{{ is_ge }}]] = {{ is_ge }}  # numpy >= {{ np_other }}
{% endfor -%}
